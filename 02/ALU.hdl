// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // Put you code here:
//do some input processing
    And16to1(a=x,b=false,out=zxval);
    And16to1(a=y,b=false,out=zyval);
    Mux16(a=x, b=zxval,sel=zx,out=zxout);
    Mux16(a=y,b=zyval,sel=zy,out=zyout);
    Not16(in=zxout,out=nxval);
    Not16(in=zyout,out=nyval);
    Mux16(a=zxout,b=nxval,sel=nx,out=xmux);
    Mux16(a=zyout,b=nyval,sel=ny,out=ymux);
//perform f and n on the processed inputs
    Add16(a=xmux,b=ymux,out=f1val);
    And16(a=xmux,b=ymux,out=f0val);
    Not16(in=f1val,out=f1negval);
    Not16(in=f0val,out=f0negval);
//now we mux the final output
    Mux4Way16(a=f0val,b=f1val,c=f0negval,d=f1negval,sel[0]=f,sel[1]=no,out=preout);
    And16(a=preout,b=preout,out=out);
    Or16Way(in=preout,out=zrcomp);
    Not(in=zrcomp,out=zr);
    IsNeg(in=preout,out=ng);
}
